name: 백엔드 서버 자동배포

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:

      # 1) 코드 체크아웃
      - name: Checkout 코드
        uses: actions/checkout@v4

      # 2) JDK 설치 & 빌드
      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Gradle 빌드
        working-directory: saladMan
        run: |
          chmod +x gradlew
          ./gradlew clean build -x test

      # 3) ECR 로그인 & 이미지 빌드·푸시
      - name: AWS 자격증명 설정 (ECR)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Docker 이미지 빌드
        working-directory: saladMan
        run: docker build -t saladman-server .

      - name: Docker 태그 & 푸시
        run: |
          docker tag saladman-server ${{ steps.login-ecr.outputs.registry }}/saladman-server:latest
          docker push   ${{ steps.login-ecr.outputs.registry }}/saladman-server:latest

      # 4) 번들 생성 (appspec.yml + scripts/)
      - name: 배포 번들 압축
        working-directory: saladMan
        run: tar -czvf ../${GITHUB_SHA}.tar.gz appspec.yml scripts

      # 5) S3에 번들 업로드
      - name: S3에 번들 업로드
        run: aws s3 cp \
          --region ap-northeast-2 \
          ./${GITHUB_SHA}.tar.gz \
          s3://saladman-server/${GITHUB_SHA}.tar.gz

      # 6) CodeDeploy로 배포 트리거
      - name: CodeDeploy 배포 시작
        run: |
          aws deploy create-deployment \
            --application-name     saladman-server \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name   Production \
            --s3-location bucket=saladman-server,bundleType=tgz,key=${GITHUB_SHA}.tar.gz

      # 7) Slack 알림
      - name: 빌드/배포 성공 알림
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": ":rocket: 배포 완료! `${{ github.workflow }}` — `${{ github.ref_name }}` @ `${{ github.sha }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 배포 실패 알림
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": ":x: 배포 실패! `${{ github.workflow }}` — `${{ github.ref_name }}` @ `${{ github.sha }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
