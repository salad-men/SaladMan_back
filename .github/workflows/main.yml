name: 백엔드 서버 자동배포

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 가져오기
        uses: actions/checkout@v4

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: AWS 자격증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 설정 파일 생성
        working-directory: saladMan
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > src/main/resources/application.properties

      - name: Gradle Wrapper 실행권한 추가
        working-directory: saladMan
        run: chmod +x gradlew

      - name: Gradle 빌드
        working-directory: saladMan
        run: ./gradlew clean build -x test

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private

      - name: Docker 이미지 빌드
        working-directory: saladMan
        run: docker build -t saladman-server .

      - name: Docker 태그 & 푸시
        run: |
          docker tag saladman-server ${{ steps.login-ecr.outputs.registry }}/saladman-server:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/saladman-server:latest

      - name: AWS 자격증명 재설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 압축하기
        working-directory: saladMan
        run: tar -czvf ../$GITHUB_SHA.tar.gz appspec.yml scripts

      - name: S3에 프로젝트 폴더 업로드하기
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://saladman-server/$GITHUB_SHA.tar.gz

      - name: CodeDeploy로 EC2에 배포
        run: |
          aws deploy create-deployment \
            --application-name saladman-server \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name Production \
            --s3-location bucket=saladman-server,bundleType=tgz,key=$GITHUB_SHA.tar.gz

      - name: Nginx HTTPS 인증서 발급 (Certbot)
        run: |
          sudo certbot --nginx -d api.saladman.net --non-interactive --agree-tos -m your-email@example.com || true

      - name: Nginx 설정 테스트
        run: sudo nginx -t

      - name: Nginx 설정 반영 (Reload)
        run: sudo nginx -s reload

      - name: 빌드 성공 Slack 알림
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": ":white_check_mark: *빌드 성공!* `${{ github.workflow }}`\n브랜치: `${{ github.ref_name }}`\n커밋: `${{ github.sha }}`\n작성자: `${{ github.actor }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 배포 성공 Slack 알림
        if: success()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": ":rocket: *배포 성공!* `${{ github.workflow }}`\n브랜치: `${{ github.ref_name }}`\n커밋: `${{ github.sha }}`\n작성자: `${{ github.actor }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 실패 Slack 알림
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": ":x: *실패!* `${{ github.workflow }}`\n브랜치: `${{ github.ref_name }}`\n커밋: `${{ github.sha }}`\n작성자: `${{ github.actor }}`"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
